import streamlit as st
import pandas as pd
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="Ph√¢n T√≠ch B√°o C√°o T√†i Ch√≠nh - TrungDev x Agribank",
    layout="wide"
)
import streamlit.components.v1 as components

# --- Ch·ª©c nƒÉng 6: Chat n·ªïi d·∫°ng bong b√≥ng v√† c·ª≠a s·ªï di chuy·ªÉn ---
st.subheader("6. Chat n·ªïi v·ªõi Gemini üí¨")

components.html("""
<style>
  #chatBubble {
    position: fixed;
    bottom: 30px;
    right: 30px;
    width: 60px;
    height: 60px;
    background-color: #9E1B32;
    border-radius: 50%;
    box-shadow: 0 4px 12px rgba(0,0,0,0.3);
    cursor: move;
    z-index: 9999;
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-size: 28px;
    font-weight: bold;
    user-select: none;
  }

  #chatWindow {
    position: fixed;
    bottom: 100px;
    right: 30px;
    width: 350px;
    height: 450px;
    background: rgba(255,255,255,0.95);
    border: 2px solid #9E1B32;
    border-radius: 15px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.4);
    z-index: 9998;
    display: none;
    flex-direction: column;
    overflow: hidden;
    backdrop-filter: blur(8px);
    user-select: none;
  }

  #chatHeader {
    background-color: #9E1B32;
    color: white;
    padding: 10px;
    font-weight: bold;
    text-align: center;
    cursor: move;
  }

  #chatBody {
    flex: 1;
    padding: 10px;
    overflow-y: auto;
    font-size: 14px;
  }

  #chatInput {
    padding: 10px;
    border-top: 1px solid #ccc;
    display: flex;
  }

  #chatInput input {
    flex: 1;
    padding: 8px;
    border: 1px solid #9E1B32;
    border-radius: 5px;
  }

  #chatInput button {
    margin-left: 8px;
    background-color: #9E1B32;
    color: white;
    border: none;
    padding: 8px 12px;
    border-radius: 5px;
    cursor: pointer;
  }

  #chatInput button:hover {
    background-color: #00703C;
  }
</style>

<div id="chatBubble" onclick="toggleChat()">üí¨</div>

<div id="chatWindow">
  <div id="chatHeader">Gemini Chat</div>
  <div id="chatBody">
    <p><i>Xin ch√†o! B·∫°n mu·ªën h·ªèi g√¨ h√¥m nay?</i></p>
  </div>
  <div id="chatInput">
    <input type="text" id="userInput" placeholder="Nh·∫≠p c√¢u h·ªèi...">
    <button onclick="sendMessage()">G·ª≠i</button>
  </div>
</div>

<script>
  // Toggle chat window
  function toggleChat() {
    const chatWindow = document.getElementById("chatWindow");
    chatWindow.style.display = chatWindow.style.display === "none" ? "flex" : "none";
  }

  // G·ª≠i tin nh·∫Øn
  function sendMessage() {
    const input = document.getElementById("userInput");
    const chatBody = document.getElementById("chatBody");
    const userText = input.value.trim();
    if (userText === "") return;

    const userMsg = document.createElement("p");
    userMsg.innerHTML = "<b>B·∫°n:</b> " + userText;
    chatBody.appendChild(userMsg);

    const aiMsg = document.createElement("p");
    aiMsg.innerHTML = "<b>Gemini:</b> ƒêang x·ª≠ l√Ω c√¢u h·ªèi...";
    chatBody.appendChild(aiMsg);

    input.value = "";
    chatBody.scrollTop = chatBody.scrollHeight;
  }

  // Di chuy·ªÉn c·ª≠a s·ªï chat
  makeDraggable("chatWindow", "chatHeader");
  makeDraggable("chatBubble", null);

  function makeDraggable(elementId, handleId) {
    const el = document.getElementById(elementId);
    const handle = handleId ? document.getElementById(handleId) : el;
    let offsetX = 0, offsetY = 0, isDragging = false;

    handle.addEventListener("mousedown", function(e) {
      isDragging = true;
      offsetX = e.clientX - el.getBoundingClientRect().left;
      offsetY = e.clientY - el.getBoundingClientRect().top;
      document.body.style.userSelect = "none";
    });

    document.addEventListener("mouseup", function() {
      isDragging = false;
      document.body.style.userSelect = "auto";
    });

    document.addEventListener("mousemove", function(e) {
      if (isDragging) {
        el.style.left = (e.clientX - offsetX) + "px";
        el.style.top = (e.clientY - offsetY) + "px";
        el.style.right = "auto";
        el.style.bottom = "auto";
      }
    });
  }
</script>
""", height=600)
# --- Tu·ª≥ ch·ªânh giao di·ªán Agribank ---
st.markdown("""
    <style>
        .main {
            background-color: #ffffff;
        }
        h1 {
            color: #9E1B32;
            font-size: 36px;
            font-weight: bold;
        }
        h2, h3 {
            color: #00703C;
        }
        div.stButton > button {
            background-color: #9E1B32;
            color: white;
            border-radius: 5px;
            padding: 0.5em 1em;
            font-weight: bold;
        }
        div.stButton > button:hover {
            background-color: #00703C;
            color: white;
        }
        .chatbox {
            background-color: #f9f9f9;
            border: 2px solid #00703C;
            padding: 1em;
            border-radius: 10px;
        }
        textarea {
            border: 1px solid #9E1B32 !important;
        }
        .stSpinner > div > div {
            color: #9E1B32 !important;
        }
    </style>
""", unsafe_allow_html=True)

st.title("Ph√¢n T√≠ch B√°o C√°o T√†i Ch√≠nh üìä")

@st.cache_data
def process_financial_data(df):
    numeric_cols = ['NƒÉm tr∆∞·ªõc', 'NƒÉm sau']
    for col in numeric_cols:
        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)

    df['T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)'] = (
        (df['NƒÉm sau'] - df['NƒÉm tr∆∞·ªõc']) / df['NƒÉm tr∆∞·ªõc'].replace(0, 1e-9)
    ) * 100

    tong_tai_san_row = df[df['Ch·ªâ ti√™u'].str.contains('T·ªîNG C·ªòNG T√ÄI S·∫¢N', case=False, na=False)]
    if tong_tai_san_row.empty:
        raise ValueError("Kh√¥ng t√¨m th·∫•y ch·ªâ ti√™u 'T·ªîNG C·ªòNG T√ÄI S·∫¢N'.")

    tong_tai_san_N_1 = tong_tai_san_row['NƒÉm tr∆∞·ªõc'].iloc[0]
    tong_tai_san_N = tong_tai_san_row['NƒÉm sau'].iloc[0]

    divisor_N_1 = tong_tai_san_N_1 if tong_tai_san_N_1 != 0 else 1e-9
    divisor_N = tong_tai_san_N if tong_tai_san_N != 0 else 1e-9

    df['T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)'] = (df['NƒÉm tr∆∞·ªõc'] / divisor_N_1) * 100
    df['T·ª∑ tr·ªçng NƒÉm sau (%)'] = (df['NƒÉm sau'] / divisor_N) * 100

    return df

def get_ai_analysis(data_for_ai, api_key):
    try:
        client = genai.Client(api_key=api_key)
        model_name = 'gemini-2.5-flash'

        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia ph√¢n t√≠ch t√†i ch√≠nh chuy√™n nghi·ªáp. D·ª±a tr√™n c√°c ch·ªâ s·ªë t√†i ch√≠nh sau, h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t kh√°ch quan, ng·∫Øn g·ªçn (kho·∫£ng 3-4 ƒëo·∫°n) v·ªÅ t√¨nh h√¨nh t√†i ch√≠nh c·ªßa doanh nghi·ªáp. ƒê√°nh gi√° t·∫≠p trung v√†o t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng, thay ƒë·ªïi c∆° c·∫•u t√†i s·∫£n v√† kh·∫£ nƒÉng thanh to√°n hi·ªán h√†nh.

        D·ªØ li·ªáu th√¥ v√† ch·ªâ s·ªë:
        {data_for_ai}
        """

        response = client.models.generate_content(
            model=model_name,
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: {e}"
    except KeyError:
        return "L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'."
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

uploaded_file = st.file_uploader(
    "1. T·∫£i file Excel B√°o c√°o T√†i ch√≠nh (Ch·ªâ ti√™u | NƒÉm tr∆∞·ªõc | NƒÉm sau)",
    type=['xlsx', 'xls']
)

if uploaded_file is not None:
    try:
        df_raw = pd.read_excel(uploaded_file)
        df_raw.columns = ['Ch·ªâ ti√™u', 'NƒÉm tr∆∞·ªõc', 'NƒÉm sau']
        df_processed = process_financial_data(df_raw.copy())

        st.subheader("2. T·ªëc ƒë·ªô TƒÉng tr∆∞·ªüng & 3. T·ª∑ tr·ªçng C∆° c·∫•u T√†i s·∫£n")
        st.dataframe(df_processed.style.format({
            'NƒÉm tr∆∞·ªõc': '{:,.0f}',
            'NƒÉm sau': '{:,.0f}',
            'T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)': '{:.2f}%',
            'T·ª∑ tr·ªçng NƒÉm tr∆∞·ªõc (%)': '{:.2f}%',
            'T·ª∑ tr·ªçng NƒÉm sau (%)': '{:.2f}%'
        }), use_container_width=True)

        st.subheader("4. C√°c Ch·ªâ s·ªë T√†i ch√≠nh C∆° b·∫£n")
        try:
            tsnh_n = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]
            tsnh_n_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]
            no_ngan_han_N = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm sau'].iloc[0]
            no_ngan_han_N_1 = df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('N·ª¢ NG·∫ÆN H·∫†N', case=False, na=False)]['NƒÉm tr∆∞·ªõc'].iloc[0]

            thanh_toan_hien_hanh_N = tsnh_n / no_ngan_han_N
            thanh_toan_hien_hanh_N_1 = tsnh_n_1 / no_ngan_han_N_1

            col1, col2 = st.columns(2)
            with col1:
                st.metric("Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm tr∆∞·ªõc)", f"{thanh_toan_hien_hanh_N_1:.2f} l·∫ßn")
            with col2:
                st.metric("Ch·ªâ s·ªë Thanh to√°n Hi·ªán h√†nh (NƒÉm sau)", f"{thanh_toan_hien_hanh_N:.2f} l·∫ßn", delta=f"{thanh_toan_hien_hanh_N - thanh_toan_hien_hanh_N_1:.2f}")
        except IndexError:
            st.warning("Thi·∫øu ch·ªâ ti√™u 'T√ÄI S·∫¢N NG·∫ÆN H·∫†N' ho·∫∑c 'N·ª¢ NG·∫ÆN H·∫†N'.")
            thanh_toan_hien_hanh_N = "N/A"
            thanh_toan_hien_hanh_N_1 = "N/A"

        st.subheader("5. Nh·∫≠n x√©t T√¨nh h√¨nh T√†i ch√≠nh (AI)")
        data_for_ai = pd.DataFrame({
            'Ch·ªâ ti√™u': [
                'To√†n b·ªô B·∫£ng ph√¢n t√≠ch (d·ªØ li·ªáu th√¥)',
                'TƒÉng tr∆∞·ªüng T√†i s·∫£n ng·∫Øn h·∫°n (%)',
                'Thanh to√°n hi·ªán h√†nh (N-1)',
                'Thanh to√°n hi·ªán h√†nh (N)'
            ],
            'Gi√° tr·ªã': [
                df_processed.to_markdown(index=False),
                f"{df_processed[df_processed['Ch·ªâ ti√™u'].str.contains('T√ÄI S·∫¢N NG·∫ÆN H·∫†N', case=False, na=False)]['T·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng (%)'].iloc[0]:.2f}%",
                f"{thanh_toan_hien_hanh_N_1}",
                f"{thanh_toan_hien_hanh_N}"
            ]
        }).to_markdown(index=False)

        if st.button("Y√™u c·∫ßu AI Ph√¢n t√≠ch"):
            api_key = st.secrets.get("GEMINI_API_KEY")
            if api_key:
                with st.spinner("ƒêang g·ª≠i d·ªØ li·ªáu ƒë·∫øn Gemini..."):
                    ai_result = get_ai_analysis(data_for_ai, api_key)
                    st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
                    st.info(ai_result)
            else:
                st.error("Kh√¥ng t√¨m th·∫•y Kh√≥a API. Vui l√≤ng c·∫•u h√¨nh 'GEMINI_API_KEY' trong Streamlit Secrets.")

    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω file: {e}")
else:
    st.info("Vui l√≤ng t·∫£i l√™n file Excel ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

